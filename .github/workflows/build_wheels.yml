name: build_wheels

# Call this workflow from other workflows in the repository by specifying "uses: ./.github/workflows/build_wheels.yml"
# Developers who are starting a new release should use this workflow to ensure wheels will be built correctly.
# Devs should check out their fork, add a tag to the last master commit on their fork, and run the release off of their fork on the added tag to ensure wheels will be built correctly.
on:
  workflow_dispatch:
      tags:
        - 'v*.*.*'
  workflow_call:
    inputs:
      release_version:
        description: 'The release version to use (e.g., v1.2.3)'
        required: true
        type: string
      highest_semver_tag:
        description: 'The highest semantic version tag without the "v" prefix (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  get-version:
    runs-on:  ubuntu-latest
    outputs:
      release_version: ${{ steps.get_release_version.outputs.release_version }}
      version_without_prefix: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
      highest_semver_tag: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Get release version
        id: get_release_version
        run: |
          if [[ -n "${{ inputs.release_version }}" ]]; then
            echo "Using provided release version: ${{ inputs.release_version }}"
            echo "::set-output name=release_version::${{ inputs.release_version }}"
          else
            echo "No release version provided. Falling back to GITHUB_REF."
            echo "::set-output name=release_version::${GITHUB_REF#refs/tags/}"
          fi
      - name: Get release version without prefix
        id: get_release_version_without_prefix
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          echo ::set-output name=version_without_prefix::${RELEASE_VERSION:1}
      - name: Get highest semver
        id: get_highest_semver
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          if [[ -n "${{ inputs.highest_semver_tag }}" ]]; then
            echo "Using provided highest semver version: ${{ inputs.highest_semver_tag }}"
            echo "highest_semver_tag=${{ inputs.highest_semver_tag }}" >> $GITHUB_OUTPUT
          else
            echo "No release version provided. Falling back to infra/scripts/setup-common-functions.sh."
            source infra/scripts/setup-common-functions.sh
            SEMVER_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+\+zing\.[0-9]+$'
            if echo "${RELEASE_VERSION}" | grep -P "$SEMVER_REGEX" &>/dev/null; then
              echo "Matched strict zing tag: ${RELEASE_VERSION}"
              echo "highest_semver_tag=$(get_tag_release -m)" >> $GITHUB_OUTPUT
            else
              echo "Error: Tag ${RELEASE_VERSION} does not match the required format (e.g., v0.42.0+zing.1)."
              exit 1
            fi
          fi
      - name: Check output
        id: check_output
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
        run: |
          echo $RELEASE_VERSION
          echo $VERSION_WITHOUT_PREFIX
          echo $HIGHEST_SEMVER_TAG

  build-python-wheel:
    name: Build wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: x64
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: './ui/.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: Build wheels
        run: |
          python -m pip install build
          python -m build --wheel --outdir wheelhouse/
      - name: Build UI
        run: make build-ui
      - uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: ./wheelhouse/*.whl

  build-source-distribution:
    name: Build source distribution
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: x64
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: './ui/.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: Build and install dependencies
        # There's a `git restore` in here because `make install-go-ci-dependencies` is actually messing up go.mod & go.sum.
        run: |
          pip install -U pip setuptools wheel twine
          git status
          git restore go.mod go.sum
          git restore sdk/python/feast/ui/yarn.lock
      - name: Build
        run: |
          python -m pip install build
          python -m build --sdist --outdir dist/
          make build-ui
      - uses: actions/upload-artifact@v4
        with:
          name: source-distribution
          path: dist/*

  verify-python-wheels:
    runs-on: ${{ matrix.os }}
    needs: [build-python-wheel, build-source-distribution, get-version]
    strategy:
      matrix:
        os: [ubuntu-latest,  macos-13 ]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        from-source: [ True, False ]
    env:
      # this script is for testing servers
      # it starts server with timeout and checks whether process killed by timeout (started healthy) or died by itself
      TEST_SCRIPT: |
        timeout 10s $@ & pid=$!
        wait $pid
        ret=$?
        if [[ $ret -ne 124 ]]
        then
           exit $ret
        else
           echo "Succeeded!"
        fi
      VERSION_WITHOUT_PREFIX: ${{ needs.get-version.outputs.version_without_prefix }}
    steps:
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: actions/download-artifact@v4.1.7
        with:
          name: python-wheels
          path: dist
      - uses: actions/download-artifact@v4.1.7
        with:
          name: source-distribution
          path: dist
      - name: Install OS X dependencies
        if: matrix.os == 'macos-13'
        run: brew install coreutils
      - name: Install wheel
        if: ${{ !matrix.from-source }}
        # try to install all wheels; only the current platform wheel should be actually installed
        run: |
          cd dist/
          pip install wheel
          for f in *.whl; do pip install $f || true; done
      - name: Install sdist
        # try to install the sdist
        if: ${{ matrix.from-source }}
        run: pip install dist/*tar.gz
      # Validate that the feast version installed is not development and is the correct version of the tag we ran it off of.
      - name: Validate Feast Version
        run: |
          feast version
          echo "Version without prefix: $VERSION_WITHOUT_PREFIX"
          if ! VERSION_OUTPUT=$(feast version); then
            echo "Error: Failed to get Feast version."
            exit 1
          fi
          VERSION_REGEX='[0-9]+\.[0-9]+\.[0-9]+\+zing\.[0-9]+'
          OUTPUT_REGEX='^Feast SDK Version: "$VERSION_REGEX"$'
          VERSION=$(echo $VERSION_OUTPUT | grep -oE "$VERSION_REGEX")
          echo "Installed Feast Version: $VERSION and using Feast Version: $VERSION_WITHOUT_PREFIX"
          if  [ -n "$OUTPUT" ] && [ "$VERSION" = "$VERSION_WITHOUT_PREFIX" ]; then
            echo "Correct Feast Version Installed"
          else
            echo "$VERSION_OUTPUT from installed wheel is not in the correct format or doesn't have the right version $VERSION."
            exit 1
          fi
      # This is temporarily disabled.
      # - name: Smoke test
      #   run: |
      #     feast init test_repo
      #     cd test_repo/feature_repo
      #     feast apply
      #     echo "$TEST_SCRIPT" > run-and-wait.sh
      #     bash run-and-wait.sh feast serve
      #     bash run-and-wait.sh feast ui
