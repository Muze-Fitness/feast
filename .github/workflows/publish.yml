name: publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: # Allows manual trigger of the workflow
    inputs:
      custom_version: # Optional input for a custom version
        description: 'Custom version to publish (e.g., v1.2.3) -- only edit if you know what you are doing'
        required: false
permissions:
  id-token: write
  contents: read

permissions:
  id-token: write
  contents: read

jobs:
  get-version:
    runs-on:  ubuntu-latest
    outputs:
      release_version: ${{ steps.get_release_version.outputs.release_version }}
      version_without_prefix: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
      highest_semver_tag: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Get release version
        id: get_release_version
        run: |
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            VERSION_REGEX="^v[0-9]+\.[0-9]+\.[0-9]+$"
            echo "Using custom version: ${{ github.event.inputs.custom_version }}"
            if [[ ! "${{ github.event.inputs.custom_version }}" =~ $VERSION_REGEX ]]; then
              echo "Error: custom_version must match semantic versioning (e.g., v1.2.3)."
              exit 1
            fi
            echo "::set-output name=release_version::${{ github.event.inputs.custom_version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "Using tag reference: ${GITHUB_REF#refs/tags/}"
            echo "::set-output name=release_version::${GITHUB_REF#refs/tags/}"
          else
            echo "Defaulting to branch name: ${GITHUB_REF#refs/heads/}"
            echo "::set-output name=release_version::${GITHUB_REF#refs/heads/}"
          fi
      - name: Get release version without prefix
        id: get_release_version_without_prefix
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          if [[ "${RELEASE_VERSION}" == v* ]]; then
            echo "::set-output name=version_without_prefix::${RELEASE_VERSION:1}"
          else
            echo "::set-output name=version_without_prefix::${RELEASE_VERSION}"
          fi
      - name: Get highest semver
        id: get_highest_semver
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
        run: |
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            HIGHEST_SEMVER_TAG="${{ github.event.inputs.custom_version }}"
            echo "::set-output name=highest_semver_tag::$HIGHEST_SEMVER_TAG"
            echo "Using custom version as highest semantic version: $HIGHEST_SEMVER_TAG"
          else
            source infra/scripts/setup-common-functions.sh
            SEMVER_REGEX='^v[0-9]+\.[0-9]+\.[0-9]+(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?$'
            if echo "${RELEASE_VERSION}" | grep -P "$SEMVER_REGEX" &>/dev/null ; then
              echo ::set-output name=highest_semver_tag::$(get_tag_release -m)
              echo "Using infra/scripts/setup-common-functions.sh to generate highest semantic version: $HIGHEST_SEMVER_TAG"
            fi
          fi
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.get_release_version.outputs.release_version }}
          VERSION_WITHOUT_PREFIX: ${{ steps.get_release_version_without_prefix.outputs.version_without_prefix }}
          HIGHEST_SEMVER_TAG: ${{ steps.get_highest_semver.outputs.highest_semver_tag }}
        run: |
          echo $RELEASE_VERSION
          echo $VERSION_WITHOUT_PREFIX
          echo $HIGHEST_SEMVER_TAG

  build_wheels:
    uses: ./.github/workflows/build_wheels.yml
    needs: get-version
    with:
        release_version: ${{ needs.get-version.outputs.release_version }}
        highest_semver_tag: ${{ needs.get-version.outputs.highest_semver_tag }}

  publish-python-sdk:
    runs-on: ubuntu-latest
    needs: [build_wheels]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - uses: aws-actions/setup-sam@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - uses: actions/download-artifact@v4.1.7
        with:
          name: python-wheels
          path: dist
      - name: Publish to CodeArtifact
        env:
          CODEARTIFACT_DOMAIN: zing-python
          CODEARTIFACT_DOMAIN_OWNER: 127385700001
          CODEARTIFACT_REPOSITORY: zing-python
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN --domain-owner $CODEARTIFACT_DOMAIN_OWNER --query authorizationToken --output text)
          export TWINE_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint --domain $CODEARTIFACT_DOMAIN --domain-owner $CODEARTIFACT_DOMAIN_OWNER --repository $CODEARTIFACT_REPOSITORY --format pypi --query repositoryEndpoint --output text)
          python -m twine upload dist/*
